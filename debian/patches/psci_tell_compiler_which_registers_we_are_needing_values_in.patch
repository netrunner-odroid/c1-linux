diff --git a/arch/arm/kernel/psci.c b/arch/arm/kernel/psci.c
index 36531643cc2..eca66e54163 100644
--- a/arch/arm/kernel/psci.c
+++ b/arch/arm/kernel/psci.c
@@ -80,10 +80,16 @@ static u32 psci_power_state_pack(struct psci_power_state state)
  * The following two functions are invoked via the invoke_psci_fn pointer
  * and will not be inlined, allowing us to piggyback on the AAPCS.
  */
-static noinline int __invoke_psci_fn_hvc(u32 function_id, u32 arg0, u32 arg1,
-					 u32 arg2)
+static noinline int __invoke_psci_fn_hvc(u32 _function_id, u32 _arg0, u32 _arg1,
+					 u32 _arg2)
 {
-	asm volatile(
+	
+        register u32 function_id asm("x0") = _function_id;
+	register u32 arg0 asm("x1") = _arg0;
+	register u32 arg1 asm("x2") = _arg1;
+	register u32 arg2 asm("x3") = _arg2;
+        
+        asm volatile(
 			__asmeq("%0", "r0")
 			__asmeq("%1", "r1")
 			__asmeq("%2", "r2")
@@ -95,10 +101,16 @@ static noinline int __invoke_psci_fn_hvc(u32 function_id, u32 arg0, u32 arg1,
 	return function_id;
 }
 
-static noinline int __invoke_psci_fn_smc(u32 function_id, u32 arg0, u32 arg1,
-					 u32 arg2)
+static noinline int __invoke_psci_fn_smc(u32 _function_id, u32 _arg0, u32 _arg1,
+					 u32 _arg2)
 {
-	asm volatile(
+	
+        register u32 function_id asm("x0") = _function_id;
+	register u32 arg0 asm("x1") = _arg0;
+	register u32 arg1 asm("x2") = _arg1;
+	register u32 arg2 asm("x3") = _arg2;
+    
+        asm volatile(
 			__asmeq("%0", "r0")
 			__asmeq("%1", "r1")
 			__asmeq("%2", "r2")
